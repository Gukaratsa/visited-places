@page "/users"
@using VisitedPlaces.Store.Shared.Models
@inject HttpClient Http

<PageTitle>Users</PageTitle>

<h1>Users</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr @onclick="@(e => OnClick(@user))">
                    <td>@user.Id</td>
                    <td>@user.Name</td>
                </tr>
            }
        </tbody>
    </table>
}


@if (selectedUser == null)
{

}
else
{
    <p>@selectedUser.Name</p>

    @if (visitedPlaces == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var visitedPlace in visitedPlaces)
                {
                    <tr>
                        <td>@visitedPlace.Id</td>
                        <td>@visitedPlace.Name</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private IEnumerable<User>? users;
    private User? selectedUser;
    private IEnumerable<Place>? visitedPlaces;

    protected override async Task OnInitializedAsync()
    {
        users = await Http.GetFromJsonAsync<IEnumerable<User>>("User/GetUsers");
    }

    private async Task OnClick(User SelectedUser)
    {
        selectedUser = SelectedUser;
        visitedPlaces = await Http.GetFromJsonAsync<IEnumerable<Place>>($"User/GetPlacesForUser?userId={selectedUser.Id}");
    }
}
